---
name: Build
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

# Adapted from https://github.com/matplotlib/matplotlib/blob/main/.github/workflows/nightlies.yml
# and https://cibuildwheel.pypa.io/en/stable/setup/#github-actions

# 1. Move as much as possible to pyproject.toml instead of using env vars
# 2. Use native compiling for macOS via -13 (Intel) and -14 (arm) runners
# 3. Use native compiling for aarch64 using public beta runner
#    https://github.blog/changelog/2025-01-16-linux-arm64-hosted-runners-now-available-for-free-in-public-repositories-public-preview/
# 4. On pushes, build and test all wheels and push as release artifacts (in
#    draft mode for main branch pushes).
# 5. On scheduled runs, build and test all wheels against
#    scientific-python-nightly-wheels NumPy dev, then upload the resulting wheels there.
# 6. On PRs, build against NumPy dev if [pip-pre] is in the commit message.

on:
  # Run daily at 1:23 UTC to upload nightly wheels to Anaconda Cloud
  schedule:
    - cron: '23 1 * * *'
  # Run on demand with workflow dispatch
  workflow_dispatch:
  # Run on all PRs
  pull_request:
  # Run on tags
  push:
    branches:
      - master
    tags:
      - '*'

permissions:
  actions: read
  contents: write

jobs:
  build_wheels:
    name: 'Wheels: ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.python }}'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: windows-latest
            arch: AMD64
          - os: windows-11-arm
            arch: ARM64
          - os: macos-14
            arch: arm64
          - os: macos-13
            arch: x86_64
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # get the non-merge commit for PRs

      # Get HDF5 outside of cibuildwheel so that we can set env vars via GITHUB_ENV
      # inside the HDF5-getting scripts and have them be in effect for the
      # cibuildwheel step.

      # Cache HDF5
      - name: Cache built HDF5
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}-6
          path: cache/hdf5

      # Windows HDF5
      - uses: nuget/setup-nuget@323ab0502cd38fdc493335025a96c8fdb0edc71f # v2.0.1
        if: runner.os == 'Windows'
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: 3.12
        if: runner.os == 'Windows'
      - run: bash ./ci/cibw_before_all_windows.sh "${{ github.workspace }}"
        env:
          ARCH: ${{ matrix.arch }}
        if: runner.os == 'Windows'

      # macOS HDF5
      - run: bash ./ci/cibw_before_all_macos.sh "${{ github.workspace }}"
        if: runner.os == 'macOS'

      # Triage build
      - run: bash ./ci/triage_build.sh "${{ matrix.arch }}" "${{ github.event.pull_request.head.sha || github.sha }}" "${{ matrix.python }}"

      # Now actually build the wheels
      - uses: pypa/cibuildwheel@c923d83ad9c1bc00211c5041d0c3f73294ff88f6 # v3.1.4

      - run: python ./ci/bundle_hdf5_whl.py wheelhouse
        if: runner.os == 'Windows'

      # And upload the results
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_wheels:
    name: Upload wheels
    needs: build_wheels
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - run: pwd && ls -alt . && ls -alt dist/
      # If it's a PR, do nothing else.
      # If it's a scheduled run, it was built with nightly NumPy, push to scientific-python:
      - name: Upload wheels to Anaconda Cloud as nightlies
        uses: scientific-python/upload-nightly-action@b36e8c0c10dbcfd2e05bf95f17ef8c14fd708dbf # 0.6.2
        with:
          artifacts_path: dist
          anaconda_nightly_upload_token: ${{ secrets.ANACONDA_ORG_UPLOAD_TOKEN }}
        if: github.repository_owner == 'h5py' && github.event_name == 'schedule'
      # If it's a push to master, create a (private) draft release;
      # If it's a tag, publish it to the existing public release, knowing that the tag name
      # is the same as th release name:
      - name: Set release variables
        id: vars
        run: |
          set -eo pipefail
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            RELEASE_NAME=""  # will use the tag name, which we always set to the release name
            GENERATE=false
          else
            RELEASE_NAME=dev
            GENERATE=true
          fi
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "generate=$GENERATE" >> $GITHUB_OUTPUT

      - name: Upload to GitHub releases
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        # https://github.com/softprops/action-gh-release?tab=readme-ov-file#inputs
        with:
          name: ${{ steps.vars.outputs.release_name }}
          # Note that draft releases are not public
          draft: ${{ github.ref_type != 'tag' }}
          prerelease: ${{ github.ref_type != 'tag' }}
          generate_release_notes: ${{ steps.vars.outputs.generate }}
          files: |
            dist/*.whl
        if: github.repository_owner == 'h5py' && github.event_name == 'push'
