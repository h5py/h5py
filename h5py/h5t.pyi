from typing import Any, Literal, NamedTuple
import numpy as np
import numpy.typing as npt

from ._objects import ObjectID
from .h5p import PropTCID
from .h5r import Reference

ref_dtype: np.dtype
regionref_dtype: np.dtype
string_info = NamedTuple(
    "string_info",
    [
        ("encoding", Literal["ascii", "utf-8"]),
        ("length", int | None),
    ],
)

class TypeID(ObjectID):
    def __hash__(self): ...
    def __richcmp__(self, other: Any, how: int) -> bool: ...
    def __copy__(self) -> TypeID: ...
    @property
    def dtype(self): ...
    def py_dtype(self): ...
    def commit(
        self,
        group: ObjectID,
        name,
        lcpl: ObjectID | None = None,
    ) -> None: ...
    def committed(self) -> bool: ...
    def copy(self) -> TypeID: ...
    def equal(self, typeid: TypeID) -> bool: ...
    def lock(self) -> None: ...
    def get_class(self) -> int: ...
    def set_size(self, size: int) -> None: ...
    def get_size(self) -> int: ...
    def get_super(self) -> TypeID: ...
    def detect_class(self, classtype: int) -> bool: ...
    def encode(self) -> str: ...
    def get_create_plist(self) -> PropTCID: ...
    def __reduce__(self) -> tuple[type[TypeID], tuple[Any, ...], str]: ...
    def __setstate__(self, state) -> None: ...

def check_dtype(*, vlen, enum, ref): ...
def check_enum_dtype(dt: np.dtype) -> dict[str, int] | None: ...
def check_opaque_dtype(dt: np.dtype) -> bool: ...
def check_ref_dtype(dt: np.dtype) -> type[Reference] | None: ...
def check_string_dtype(dt: np.dtype) -> string_info | None: ...
def check_vlen_dtype(dt: np.dtype) -> type | None: ...
def enum_dtype(
    values_dict: dict[str, int],
    basetype: npt.DTypeLike = np.uint8,
) -> np.dtype: ...
def opaque_dtype(np_dtype: npt.DTypeLike) -> np.dtype: ...
def special_dtype(
    *,
    vlen: npt.DTypeLike,
    enum: tuple[npt.DTypeLike, dict[str, int]],
    ref: type[Reference],
) -> np.dtype: ...
def string_dtype(
    encoding: Literal["ascii", "utf-8"] = "utf-8",
    length: int | None = None,
) -> np.dtype: ...
def vlen_dtype(basetype: npt.DTypeLike) -> np.dtype: ...
