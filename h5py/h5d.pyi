from typing import Any, Callable, NamedTuple
import numpy as np

from .h5t import TypeID
from .h5s import SpaceID
from .h5p import PropDAID, PropDCID, PropID
from ._objects import ObjectID

class StoreInfo(NamedTuple):
    chunk_offset: tuple[int, ...] | None
    filter_mask: int
    byte_offset: int | None
    size: int

class DatasetID(ObjectID):
    @property
    def dtype(self): ...
    # same return type as TypeID.dtype
    @property
    def shape(self): ...
    # same return type as SpaceID.get_simple_extent_dims
    @property
    def rank(self): ...
    # same return type as SpaceID.get_simple_extent_ndims
    def read(
        self,
        mspace: SpaceID,
        fspace: SpaceID,
        arr_obj: np.ndarray,
        mtype: TypeID | None = None,
        dxpl: PropID | None = None,
    ) -> None: ...
    def write(
        self,
        mspace: SpaceID,
        fspace: SpaceID,
        arr_obj: np.ndarray,
        mtype: TypeID | None = None,
        dxpl: PropID | None = None,
    ) -> None: ...
    def extend(self, shape: tuple[int, ...]) -> None: ...
    def set_extent(self, shape: tuple[int, ...]) -> None: ...
    def get_space(self) -> SpaceID: ...
    def get_space_status(self) -> int: ...
    def get_type(self) -> TypeID: ...
    def get_create_plist(self) -> PropDCID: ...
    def get_access_plist(self) -> PropDAID: ...
    def get_offset(self) -> int: ...
    def get_storage_size(self) -> int: ...
    def flush(self) -> None: ...
    def refresh(self) -> None: ...
    def write_direct_chunk(
        self,
        offsets: tuple[int, ...],
        data,
        filter_mask: int,
        dxpl: PropID | None = None,
    ) -> None: ...
    def read_direct_chunk(
        self,
        offsets,
        dxpl: PropID | None = None,
        out: Any | None = None,
    ) -> tuple[int, Any]: ...

    # the following methods might not be available with old versions of HDF5

    def get_num_chunks(self, space=SpaceID) -> int: ...
    def get_chunk_info(self, index, space: SpaceID | None = None) -> StoreInfo: ...
    def get_chunk_info_by_coord(self, chunk_offset: tuple[int, ...]) -> StoreInfo: ...
    def chunk_iter(self, func: Callable, dxpl: PropID): ...
