from typing import Self
import numpy as np
from ._objects import ObjectID
from .h5s import SpaceID

FILE_CREATE: PropClassID
FILE_ACCESS: PropClassID
DATASET_ACCESS: PropClassID
DATASET_CREATE: PropClassID
DATASET_XFER: PropClassID
DATATYPE_CREATE: PropClassID
GROUP_CREATE: PropClassID
LINK_CREATE: PropClassID
LINK_ACCESS: PropClassID
OBJECT_CREATE: PropClassID
OBJECT_COPY: PropClassID

CRT_ORDER_TRACKED: int
CRT_ORDER_INDEXED: int

class PropID(ObjectID):
    def equal(self, plist: PropID) -> bool: ...
    def __richcmp__(self, other, how: int) -> bool: ...
    def __hash__(self) -> int: ...

class PropClassID(PropID): ...

class PropInstanceID(PropID):
    def copy(self) -> Self: ...
    def get_class(self) -> PropClassID: ...

class PropCopyID(PropInstanceID):
    def set_copy_object(self, flags: int) -> None: ...
    def get_copy_object(self) -> int: ...

class PropDAID(PropInstanceID): ...
class PropCreateID(PropInstanceID): ...

class PropOCID(PropCreateID):
    def set_attr_creation_order(self, flags: int) -> None: ...
    def get_attr_creation_order(self) -> int: ...
    def set_attr_phase_change(
        self, max_compact: int = 8, min_dense: int = 6
    ) -> None: ...
    def get_attr_phase_change(self) -> tuple[int, int]: ...
    def set_obj_track_times(self, track_times) -> None: ...
    def get_obj_track_times(self): ...

class PropFCID(PropOCID):
    def get_version(self) -> tuple[int, int, int, int]: ...
    def set_userblock(self, size: int) -> None: ...
    def get_userblock(self) -> int: ...
    def set_sizes(self, addr: int, size: int) -> None: ...
    def get_sizes(self) -> tuple[int, int]: ...
    def set_link_creation_order(self, flags: int) -> None: ...
    def get_link_creation_order(self) -> int: ...
    def set_file_space_strategy(
        self, strategy: int, persist: bool, threshold: int
    ) -> None: ...
    def get_file_space_strategy(self) -> tuple[int, bool, int]: ...
    def set_file_space_page_size(self, fsp_size: int) -> None: ...
    def get_file_space_page_size(self) -> int: ...

class PropDCID(PropOCID):
    def set_layout(self, layout_code: int) -> None: ...
    def get_layout(self) -> int: ...
    def set_chunk(self, chunksize) -> None: ...
    def get_chunk(self) -> tuple: ...
    def set_fill_value(self, value: np.ndarray) -> None: ...
    def get_fill_value(self, value: np.ndarray) -> None: ...
    def fill_value_defined(self) -> int: ...
    def set_fill_time(self, fill_time: int) -> None: ...
    def get_fill_time(self) -> int: ...
    def set_alloc_time(self, alloc_time: int) -> None: ...
    def get_alloc_time(self) -> int: ...
    def set_filter(
        self,
        filter_code: int,
        flags: int = 0,
        values=None,
    ) -> None: ...
    def all_filters_avail(self) -> bool: ...
    def get_nfilters(self) -> int: ...
    def get_filter(self, filter_idx: int) -> tuple[int, int, tuple[int, ...], str]: ...
    def _has_filter(self, filter_code: int) -> bool: ...
    def get_filter_by_id(
        self,
        filter_code: int,
    ) -> tuple[int, tuple[int, ...], str]: ...
    def remove_filter(self, filter_class: int) -> None: ...
    def set_deflate(self, level: int = 5) -> None: ...
    def set_fletcher32(self) -> None: ...
    def set_shuffle(self) -> None: ...
    def set_szip(self, options: int, pixels_per_block: int) -> None: ...
    def set_scaleoffset(self, scale_type, scale_factor: int) -> None: ...
    def set_external(self, name: str, offset: int, size: int) -> None: ...
    def get_external_count(self) -> int: ...
    def get_external(self, idx: int = 0) -> tuple[str, int, int]: ...
    def set_virtual(
        self,
        vspace: SpaceID,
        src_file_name,
        src_dset_name,
        src_space: SpaceID,
    ) -> None: ...
    def get_virtual_count(self) -> int: ...
    def get_virtual_dsetname(self, index: int = 0) -> str: ...
    def get_virtual_filename(self, index: int = 0) -> str: ...
    def get_virtual_vspace(self, index: int = 0) -> SpaceID: ...
    def get_virtual_srcspace(self, index: int = 0) -> SpaceID: ...

class PropTCID(PropOCID): ...

class PropGCID(PropOCID):
    def set_link_creation_order(self, flags: int) -> None: ...
    def get_link_creation_order(self) -> int: ...

def create(_p: PropClassID, /) -> PropID: ...
