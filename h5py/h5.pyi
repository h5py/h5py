from typing import Literal
from typing_extensions import deprecated

HDF5_VERSION_COMPILED_AGAINST: tuple[int, int, int]
NUMPY_VERSION_COMPILED_AGAINST: str
CYTHON_VERSION_COMPILED_WITH: str

class ByteStringContext:
    _readbytes: bool
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...

class H5PYConfig_cls:
    # annotate H5PYConfig (class), which is unbound at runtime
    # because the singleton instance reuses the name of the class
    def __init__(self) -> None: ...
    @property
    def complex_names(self) -> tuple[str, str]: ...
    @property
    def bool_names(self) -> tuple[bytes, bytes]: ...
    @property
    def read_bytes_strings(self) -> ByteStringContext: ...
    @property
    def mpi(self) -> bool: ...
    @property
    def ros3(self) -> bool: ...
    @property
    def direct_vfd(self) -> bool: ...
    @property
    def track_order(self) -> bool: ...
    @property
    @deprecated(
        "h5py.get_config().swmr_min_hdf5_version is deprecated. "
        "This version of h5py does not support older HDF5 without SWMR.",
    )
    def swmr_min_hdf5_version(self) -> tuple[int, int, int]: ...
    @property
    @deprecated(
        "h5py.get_config().vds_min_hdf5_version is deprecated. "
        "This version of h5py does not support older HDF5 without VDS.",
    )
    def vds_min_hdf5_version(self) -> tuple[int, int, int]: ...
    @property
    @deprecated(
        "h5py.get_config().default_file_mode is deprecated. "
        "The default mode is now always 'r' (read-only)."
    )
    def default_file_mode(self) -> Literal["r"]: ...

def get_config() -> H5PYConfig_cls: ...
def get_libversion() -> tuple[int, int, int]: ...
